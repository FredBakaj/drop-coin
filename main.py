import json
import os
import threading
import time

import requests
import telebot

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
TELEGRAM_BOT_TOKEN = "7383205503:AAE1nd1mC4w6ztZCzW_SquD5TOGXZT7DWn4"

# ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
CHAT_ID = "1903751935"

# –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–∏—Ç–∫–æ–∏–Ω–∞ (–≤ USD), –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
THRESHOLD_PRICE = 50000

file_name = "meta.json"

def get_bitcoin_price():
    try:
        response = requests.get("https://api.coindesk.com/v1/bpi/currentprice.json")
        data = response.json()
        bitcoin_price = float(data["bpi"]["USD"]["rate"].replace(",", ""))
        return bitcoin_price
    except Exception as e:
        print(f"Error fetching Bitcoin price: {e}")
        return None


def calculate_percentage_difference(value1, value2):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
        if value1 == 0:
            raise ValueError("–ü–µ—Ä–≤–∞—è —Å—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ –Ω—É–ª—é.")

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        difference = value2 - value1
        percentage_difference = (difference / value1) * 100

        return abs(percentage_difference)
    except Exception as e:
        return str(e)

def send_notification(bot):
    bitcoin_price = get_bitcoin_price()
    if bitcoin_price is not None:
        with open(file_name, 'r') as f:
            data = json.load(f)
        for coin in data:
            if calculate_percentage_difference(bitcoin_price, float(coin["price"])) < float(coin["percent"]):
                message = f"–¶–µ–Ω–∞ –±–∏—Ç–∫–æ–∏–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ {bitcoin_price:.2f} USD! üöÄ"
                bot.send_message(CHAT_ID, message)



def handle_document(bot, message):
    try:
        # –ü–æ–ª—É—á–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ
        file_id = message.document.file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        downloaded_file = bot.download_file(file_path)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        with open(file_name, 'wb') as f:
            f.write(downloaded_file)

        # –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏ —Ç. –¥.)
        # ...
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.reply_to(message, f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


def echo(bot, message: telebot.types.Message):
    bot.send_message(CHAT_ID, message.text)
    pass


def main():
    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
    bot.register_message_handler(lambda message: handle_document(bot, message), content_types=['document'])
    bot.register_message_handler(lambda message: echo(bot, message), content_types=['text'])

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ bot.polling()
    def polling_thread():
        print("pooling is start")
        bot.polling()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    def notification_thread():
        print("notification is start")
        while True:
            time.sleep(60)
            send_notification(bot)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
    polling = threading.Thread(target=polling_thread)
    notifications = threading.Thread(target=notification_thread)

    polling.start()
    notifications.start()

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ (—Ö–æ—Ç—è –æ–Ω–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
    polling.join()
    notifications.join()

if __name__ == "__main__":
    main()
